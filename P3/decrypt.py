from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import importKey
from math import gcd
import glob
import sympy

#openssl rsa -in daniel.moron.roces_pubkeyRSA_RW.pem -pubin -text -modulus > nDani.txt
nDani = 0x8C754B72B8F210425F62423C5DCE6109CB854469E2AE3B7A3B29B8D043F23B646B9431493C1359B46677C2ECE2DC6716856FF7BDEBA241B77BDECE4F26A6DAADBC33D8BBB0271651A79325A6D6759FAC34CB009E3A17ED3AFBFDBDDE8451BD374E9C9E3BA12C4EBE2899F076D122E887683FED02ABF625EFDE4526DAF2DF7236BEA47EE18F9C50912A77CE42C32E9FDE87F04C94F6B144D65FE20422B848C7C4389F6DA88EB31BF74E14B64E3FF8DC515CC16757B25B758633E48C96575B9C80CC0C0358C32DEE7EFDD3BA2F08E934D011D10CFABDA786F7134D6EC3E6EAF329776F791128B02F607D58B82832FC376B66F061AFB81AF41C5DDDF527A0BF2E8B
#nDani = 17731202877056087325459943284109385255470376228301270634475242524372713080849705315798750328536809242778018531282380290987496282873406656390501639397753665681831941838140932215157268229928630044205231534904443858896671810416923855373669882239063986211990999016522428154242043279044548306501977678927539096310962915373650722161813137138124546299661168365990601767807034517519156150577163272238006958044101739664496086590307576553455542961545379273650625297564210555797012264436104762292328286750619505560681721373697953841113852427239807368913087264558483738306607666331777986873363994173465595514104433479859853799051
e = 2**16+1

#openssl rsa -in guillem.gonzalez.valdivia_pubkeyRSA_RW.pem  -pubin -text -modulus > nGuillem.txt
nGuillem=0x6D5899835165F146F593577FE490F66481552DB698494694B4E7F26A1B213EB0EC9826F36E6B9074501218E630D1F9214E5049B08CF25CBFA72BB2D57AC6B092816AE870DE9467E7356AD5AD662D13C9809CB317CE20E1FE2C00EB3676980C7826E94C8F5AF80BC158B09B475C5117DBC96249B80E6F53E9A9B5BA401D1B4EB160872F2D47724A076AE6A3D43692BCD947A7C7C8BEDD60034D67F8B75FB62F9D2CF3504F0223C20E6A3766F07B51E8A6A5EDC15376CC3A50F71A886A469882675573EB7F60138B5671798530DCEACF98639C5ABBEB837709DFB7C0479DD68340E98BD24DDEC52DFCD8E32EF38D2C9F425AFF687943A817EE724D755021B13F3D
#nGuillem = 13803665362001006083541163093158838352648037580401168396321496139963636619031401735557698209623860631556095224723525855141400714096752013835415805103103308191539312953025256411365597753520508201739928158589657700203957096290275483233250872099548667554865769208795854154096206019215572844531848114989176481652680854145870435498356152403383884072931228168602647369684231354584749761084898201035665609474688427723572985637944370604579242924356662280944162995161927671057323004333473491131187505112980681244775827328008229277440401865069422416096372530505312478358351096624244730402384367692312298305969090443808429129533

'''
Si dues claus K = PQ i L = PA, llavors gcd(K,L) = P i llavors, Q = K/P i A = L/P
'''

# os.popen
	
# os.listdir
def decrypt(modulus):
	for f in glob.glob('*_pubkeyRSA_RW.pem'):
		aux = open(f)
		key = importKey(aux.read())
		if(gcd(modulus, key.n) != 1):
			print("Clau compartida amb: " + str(aux.name))
			print("key auxiliar: " + str(key.n))
			return gcd(modulus, key.n) #trobat un dels primers que formen la clau
	return -1
		
		
		
def main():
	print('----------------Dani----------------')
	prime = decrypt(nDani)
	print("P: ")
	print(prime)
	print("Q: ")
	prime2 = nDani//prime
	print(prime2)
	phi_n = (prime - 1) * (prime2 - 1)
	print("PHI N:")
	print(phi_n)
	dDani = sympy.mod_inverse(e, phi_n)
	privateLluis = RSA.construct((nDani, e, dDani))
	outputDani = open('keyDani.pem', 'wb')
	outputDani.write(privateLluis.exportKey('PEM'))
	outputDani.close()
	
	print('----------------Guillem----------------')
	prime3 = decrypt(nGuillem)
	print("P: ")
	print(prime3)
	print("Q: ")
	prime4 = nGuillem//prime3
	print(prime4)
	phi_n = (prime3 - 1) * (prime4 - 1)
	dGuillem = sympy.mod_inverse(e, phi_n)
	privateGuillem = RSA.construct((nGuillem, e, int(dGuillem)))
	outputGuillem = open('keyGuillem.pem', 'wb')
	outputGuillem.write(privateGuillem.exportKey('PEM'))
	outputGuillem.close()
    


main()


'''
decGuillem = openssl rsautl -decrypt -inkey keyGuillem.pem -in anGuillemo.guilera_RSA_RW.enc -out decGuillem
decDani = openlsssl rsautl -decrypt -inkey keyDani.pem -in daniel.moron.roces_RSA_RW.enc -out decDani
Per obtenir la clau publica: openssl rsa -in daniel.moron.roces_pubkeyRSA_RW.pem -pubin -text -modulus > salida.txt
'''

'''
decAES:
openssl enc -d -aes-128-cbc -pbkdf2 -in Dani.marques_AES_pseudo.enc -out DaniAESdec
'''